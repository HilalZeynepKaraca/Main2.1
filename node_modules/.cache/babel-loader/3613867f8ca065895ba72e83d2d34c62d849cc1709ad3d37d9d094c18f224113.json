{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ervae\\\\Downloads\\\\FibrozisEvreTahmini-master\\\\FibrozisEvreTahmini-master\\\\src\\\\pages\\\\FormPage.js\",\n  _s = $RefreshSig$();\n/*\r\nSONUÇ VE RAPOR SAYFASI DENEMESİ İÇİN BU YAPILD!!!\r\nhastaVerisi diye bir obje oluşturduk. İçinde ad, yaş, cinsiyet gibi hasta bilgileri var.\r\nBir buton koyduk: Tahmin Et\r\nButona tıklayınca handleSubmit fonksiyonu çalışıyor.\r\nBu fonksiyon bizi React Router'ın navigate fonksiyonu ile /result sayfasına götürüyor.\r\nnavigate fonksiyonuna ikinci parametre olarak { state: hastaVerisi } verdik.\r\nYani /result sayfasına hastaya ait bilgileri taşıdık. \r\n*/\n/*Gerçek uygulamada burası şu şekilde çalışacak:\r\n 1. Kullanıcı form alanlarına hastanın adı, soyadı, yaşı, cinsiyeti,\r\nkan değerleri ve diğer parametreleri girer.\r\n2. Formdaki bu bilgiler React state veya form yönetim kütüphanesi\r\n(örneğin Formik, React Hook Form) ile tutulur.\r\n3. \"Tahmin Et\" butonuna tıklandığında, girilen tüm veriler toplanır\r\n ve arka planda çalışan yapay zeka veya tahmin servisine API çağrısı\r\n(fetch/axios ile POST isteği) yapılır.\r\n4. Yapay zeka servisi tahmini yaptıktan sonra sonuçlar bu frontend\r\nuygulamasına döner.\r\n5. Gelen sonuçlar ve hastaya ait bilgiler React Router'ın navigate\r\nfonksiyonu ile `/result` sayfasına state olarak aktarılır.\r\n6. `/result` sayfasında bu bilgiler kullanılarak hasta verileri,\r\n ultrason görüntüsü ve tahmin sonucu gösterilir.\r\n  Böylece kullanıcı, hasta bilgilerini girer, tahmini yaptırır\r\n  ve sonucu aynı uygulama içinde detaylı bir rapor olarak görür.\r\n*/\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const hastaVerisi = {\n    name: \"Ayşe Yılmaz\",\n    age: 45,\n    gender: \"Kadın\"\n  };\n  const handleSubmit = () => {\n    navigate(\"/result\", {\n      state: hastaVerisi\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Hasta Formu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Tahmin Et\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(FormPage, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = FormPage;\nexport default FormPage;\nvar _c;\n$RefreshReg$(_c, \"FormPage\");","map":{"version":3,"names":["React","useNavigate","jsxDEV","_jsxDEV","FormPage","_s","navigate","hastaVerisi","name","age","gender","handleSubmit","state","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ervae/Downloads/FibrozisEvreTahmini-master/FibrozisEvreTahmini-master/src/pages/FormPage.js"],"sourcesContent":["/*\r\nSONUÇ VE RAPOR SAYFASI DENEMESİ İÇİN BU YAPILD!!!\r\nhastaVerisi diye bir obje oluşturduk. İçinde ad, yaş, cinsiyet gibi hasta bilgileri var.\r\nBir buton koyduk: Tahmin Et\r\nButona tıklayınca handleSubmit fonksiyonu çalışıyor.\r\nBu fonksiyon bizi React Router'ın navigate fonksiyonu ile /result sayfasına götürüyor.\r\nnavigate fonksiyonuna ikinci parametre olarak { state: hastaVerisi } verdik.\r\nYani /result sayfasına hastaya ait bilgileri taşıdık. \r\n*/\r\n/*Gerçek uygulamada burası şu şekilde çalışacak:\r\n 1. Kullanıcı form alanlarına hastanın adı, soyadı, yaşı, cinsiyeti,\r\nkan değerleri ve diğer parametreleri girer.\r\n2. Formdaki bu bilgiler React state veya form yönetim kütüphanesi\r\n(örneğin Formik, React Hook Form) ile tutulur.\r\n3. \"Tahmin Et\" butonuna tıklandığında, girilen tüm veriler toplanır\r\n ve arka planda çalışan yapay zeka veya tahmin servisine API çağrısı\r\n(fetch/axios ile POST isteği) yapılır.\r\n4. Yapay zeka servisi tahmini yaptıktan sonra sonuçlar bu frontend\r\nuygulamasına döner.\r\n5. Gelen sonuçlar ve hastaya ait bilgiler React Router'ın navigate\r\nfonksiyonu ile `/result` sayfasına state olarak aktarılır.\r\n6. `/result` sayfasında bu bilgiler kullanılarak hasta verileri,\r\n ultrason görüntüsü ve tahmin sonucu gösterilir.\r\n  Böylece kullanıcı, hasta bilgilerini girer, tahmini yaptırır\r\n  ve sonucu aynı uygulama içinde detaylı bir rapor olarak görür.\r\n*/ \r\nimport React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst FormPage = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const hastaVerisi = {\r\n    name: \"Ayşe Yılmaz\",\r\n    age: 45,\r\n    gender: \"Kadın\",\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    navigate(\"/result\", { state: hastaVerisi });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Hasta Formu</h2>\r\n      {/* Form elemanları buraya */}\r\n      <button onClick={handleSubmit}>Tahmin Et</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormPage;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAE9B,MAAMM,WAAW,GAAG;IAClBC,IAAI,EAAE,aAAa;IACnBC,GAAG,EAAE,EAAE;IACPC,MAAM,EAAE;EACV,CAAC;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzBL,QAAQ,CAAC,SAAS,EAAE;MAAEM,KAAK,EAAEL;IAAY,CAAC,CAAC;EAC7C,CAAC;EAED,oBACEJ,OAAA;IAAAU,QAAA,gBACEV,OAAA;MAAAU,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEpBd,OAAA;MAAQe,OAAO,EAAEP,YAAa;MAAAE,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV,CAAC;AAACZ,EAAA,CApBID,QAAQ;EAAA,QACKH,WAAW;AAAA;AAAAkB,EAAA,GADxBf,QAAQ;AAsBd,eAAeA,QAAQ;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}